/**
* JJTree file
*/

options {
  JDK_VERSION = "1.5";
}
 
PARSER_BEGIN(eg2) 
import java.io.FileNotFoundException;
import java.io.FileReader;

public class eg2 {
  public static void main(String args[]) {
    System.out.println("Reading from haxeSample.hx...");

	FileReader fr;
	try {
		fr = new FileReader("/home/smouquet/workspace_hxml/TestJavaCC/src/haxeSample.hx");
		new eg2(fr);
	} catch (FileNotFoundException e1) {
		e1.printStackTrace();
	} 
	
    try {
      SimpleNode n = eg2.Start();
      n.dump("");
      System.out.println("Thank you.");
    } catch (Exception e) {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
    }
  }
}
PARSER_END(eg2)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}


TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
}

/*
! ------------------------------------------------- Sets

{ID Head}       = {Letter} + [_]
{ID Tail}       = {AlphaNumeric} + [_]
{String Char A} = {ANSI Printable} - ["\]
{String Char B} = {ANSI Printable} - [''\]
{Regex Char}    = {ANSI Printable} - [/]
{Hex Number}    = {Number} + [ABCDEF] + [abcdef] */

TOKEN : /* IDENTIFIERS */
{
  < CLASSNAME: <LETTER_MAJ> (<LETTER>)* >
| < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
| < #LETTER_MAJ: ["A"-"Z"] >
| < #LETTER: ["_","a"-"z","A"-"Z"] >
| < #DIGIT: ["0"-"9"] >

| < #ID_HEAD: ["a"-"z","A"-"Z","_"] >
| < #ID_TAIL: ["0"-"9","a"-"z","A"-"Z","_"] >
| < #STRING_CHAR_A: ["0"-"9","a"-"z","A"-"Z"] > /*- ["\]   */
| < #STRING_CHAR_B: ["0"-"9","a"-"z","A"-"Z"] > /*- [''\]  */
| < #REGEX_CHAR: ["0"-"9","a"-"z","A"-"Z"] >    /*- [/]    */
| < #HEX_NUMBER: ["0"-"9","a"-"f","A"-"F"] >

| < IDENT: <ID_HEAD> (<ID_TAIL>)* >
| < STRLIST: <ID_HEAD> >
| < REGEXLIST: <ID_HEAD> >
| < DECLIST: <ID_HEAD> >
| < HEXLIST: "0x" (<HEX_NUMBER>)+ > /* taille: 6 */
| < BOOLLIST: "true"|"false" >
}

/*

! ------------------------------------------------- Terminals

Ident    = {ID Head}{ID Tail}*
StrLit   = '"' ( {String Char A} | '\' {ANSI Printable} )* '"' | '' ( {String Char B} | '\' {ANSI Printable} )* ''
RegexLit = '~/' ({Regex Char} | '\' {ANSI Printable} )* '/' ('i'|'g'|'m'|'s')*
DecLit   = ({Number}* '.'? | {Number}+ ('e'('-')?)?) {Number}+
HexLit   = '0x' {Hex Number}+
BoolLit  = 'true' | 'false'

Comment Start = '/\\*'
Comment End   = '*\\/'
Comment Line  = '//'
*/


SimpleNode Start():{}
{
  [ Package() ]
  BeginClass()
  BeginMethodMain()
  (MyExpression())*
  End()
  End()
  { return jjtThis; }
}
void MyExpression():{ } 
{
  "var " <IDENTIFIER> "=" Valeur() ";" | "php.Lib.print('Hello ' + name + '!');"
}
void Valeur():{ } 
{
  "php.Web.getParams()" | "params.exists('name') ? params.get('name') : 'world'"
}
void BeginMethodMain():{ } 
{
  "static function main() {"
}
void Package():{ } {
  "package " Identifier() ";"}
void BeginClass():{ }{
  "class " <CLASSNAME> "{"  }
void End():{ }
{
  "}"  
}
void Expression():{ } 
{
  AdditiveExpression()
}
void AdditiveExpression():{}
{
  MultiplicativeExpression() ( ( "+" | "-" ) MultiplicativeExpression() )*
}
void MultiplicativeExpression():{}
{
  UnaryExpression() ( ( "*" | "/" | "%" ) UnaryExpression() )*
}
void UnaryExpression():{}
{
  "(" Expression() ")" | Identifier() | Integer()
}
void Identifier():{}
{
  <IDENTIFIER>
}
void Integer():{}
{
  <INTEGER_LITERAL>
}
