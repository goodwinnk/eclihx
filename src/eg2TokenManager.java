/* Generated By:JJTree&JavaCC: Do not edit this line. eg2TokenManager.java */
import java.io.FileNotFoundException;
import java.io.FileReader;

/** Token Manager. */
@SuppressWarnings("all")
public class eg2TokenManager implements eg2Constants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x40000000000L) != 0L)
            return 21;
         if ((active0 & 0x1f90000000L) != 0L)
         {
            jjmatchedKind = 12;
            return 35;
         }
         return -1;
      case 1:
         if ((active0 & 0x1f90000000L) != 0L)
         {
            jjmatchedKind = 12;
            jjmatchedPos = 1;
            return 35;
         }
         return -1;
      case 2:
         if ((active0 & 0x1f90000000L) != 0L)
         {
            jjmatchedKind = 12;
            jjmatchedPos = 2;
            return 35;
         }
         return -1;
      case 3:
         if ((active0 & 0x1e00000000L) != 0L)
         {
            jjmatchedKind = 12;
            jjmatchedPos = 3;
            return 35;
         }
         if ((active0 & 0x180000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 12;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 4:
         if ((active0 & 0x180000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 12;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x1e00000000L) != 0L)
         {
            jjmatchedKind = 12;
            jjmatchedPos = 4;
            return 35;
         }
         return -1;
      case 5:
         if ((active0 & 0xe00000000L) != 0L)
         {
            jjmatchedKind = 12;
            jjmatchedPos = 5;
            return 35;
         }
         if ((active0 & 0x180000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 12;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 6:
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 12;
            jjmatchedPos = 6;
            return 35;
         }
         if ((active0 & 0x600000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 12;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x180000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 12;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 7:
         if ((active0 & 0x600000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 12;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x180000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 12;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 8:
         if ((active0 & 0x600000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 12;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x180000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 12;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 9:
         if ((active0 & 0x600000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 12;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x180000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 12;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 10:
         if ((active0 & 0x600000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 12;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x180000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 12;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 11:
         if ((active0 & 0x600000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 12;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x180000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 12;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 12:
         if ((active0 & 0x600000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 12;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x180000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 12;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 13:
         if ((active0 & 0x600000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 12;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x180000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 12;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 14:
         if ((active0 & 0x600000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 12;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x180000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 12;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 15:
         if ((active0 & 0x600000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 12;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x180000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 12;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 16:
         if ((active0 & 0x600000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 12;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x180000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 12;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 17:
         if ((active0 & 0x600000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 12;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x180000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 12;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 18:
         if ((active0 & 0x600000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 12;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x180000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 12;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 19:
         if ((active0 & 0x600000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 12;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x80000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 12;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 20:
         if ((active0 & 0x600000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 12;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x80000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 12;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 21:
         if ((active0 & 0x600000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 12;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x80000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 12;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 22:
         if ((active0 & 0x600000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 12;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x80000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 12;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 23:
         if ((active0 & 0x600000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 12;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x80000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 12;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 24:
         if ((active0 & 0x200000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 12;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x80000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 12;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 25:
         if ((active0 & 0x200000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 12;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x80000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 12;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 26:
         if ((active0 & 0x200000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 12;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x80000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 12;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 27:
         if ((active0 & 0x200000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 12;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x80000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 12;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 28:
         if ((active0 & 0x200000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 12;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x80000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 12;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 29:
         if ((active0 & 0x200000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 12;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x80000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 12;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 30:
         if ((active0 & 0x200000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 12;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x80000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 12;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 31:
         if ((active0 & 0x200000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 12;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x80000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 12;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 32:
         if ((active0 & 0x200000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 12;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x80000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 12;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 33:
         if ((active0 & 0x200000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 12;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x80000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 12;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 34:
         if ((active0 & 0x200000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 12;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x80000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 12;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 35:
         if ((active0 & 0x200000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 12;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x80000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 12;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 36:
         if ((active0 & 0x200000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 12;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x80000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 12;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 37:
         if ((active0 & 0x200000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 12;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 38:
         if ((active0 & 0x200000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 12;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 39:
         if ((active0 & 0x200000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 12;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 40:
         if ((active0 & 0x200000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 12;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 41:
         if ((active0 & 0x200000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 12;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 42:
         if ((active0 & 0x200000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 12;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 43:
         if ((active0 & 0x200000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 12;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 44:
         if ((active0 & 0x200000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 12;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 45:
         if ((active0 & 0x200000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 12;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 46:
         if ((active0 & 0x200000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 12;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 47:
         if ((active0 & 0x200000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 12;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 48:
         if ((active0 & 0x200000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 12;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 49:
         if ((active0 & 0x200000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 12;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 50:
         if ((active0 & 0x200000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 12;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 37:
         return jjStopAtPos(0, 43);
      case 40:
         return jjStopAtPos(0, 44);
      case 41:
         return jjStopAtPos(0, 45);
      case 42:
         return jjStopAtPos(0, 41);
      case 43:
         return jjStopAtPos(0, 39);
      case 45:
         return jjStopAtPos(0, 40);
      case 47:
         return jjStartNfaWithStates_0(0, 42, 21);
      case 59:
         return jjStopAtPos(0, 30);
      case 61:
         return jjStopAtPos(0, 29);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x1000000000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0xb80000000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x400000000L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x10000000L);
      case 123:
         return jjStopAtPos(0, 37);
      case 125:
         return jjStopAtPos(0, 38);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0xa10000000L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x180000000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x1400000000L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x180000000L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x210000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 32:
         if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(3, 28);
         break;
      case 46:
         return jjMoveStringLiteralDfa4_0(active0, 0x180000000L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000L);
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 76:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000L);
      case 87:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 32:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(5, 36);
         break;
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000L);
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000L);
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000L);
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000L);
      case 46:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000L);
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0x180000000L);
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 32:
         if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(7, 35);
         break;
      case 46:
         return jjMoveStringLiteralDfa8_0(active0, 0x180000000L);
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000L);
      case 102:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 103:
         return jjMoveStringLiteralDfa9_0(active0, 0x100000000L);
      case 112:
         return jjMoveStringLiteralDfa9_0(active0, 0x80000000L);
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000000L);
      case 120:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0x100000000L);
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x200000000L);
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0x400000000L);
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0x80000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
static private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa11_0(active0, 0x400000000L);
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x80000000L);
      case 115:
         return jjMoveStringLiteralDfa11_0(active0, 0x200000000L);
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0x100000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
static private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 80:
         return jjMoveStringLiteralDfa12_0(active0, 0x100000000L);
      case 110:
         return jjMoveStringLiteralDfa12_0(active0, 0x80000000L);
      case 116:
         return jjMoveStringLiteralDfa12_0(active0, 0x600000000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0);
}
static private int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0);
      return 12;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa13_0(active0, 0x100000000L);
      case 105:
         return jjMoveStringLiteralDfa13_0(active0, 0x400000000L);
      case 115:
         return jjMoveStringLiteralDfa13_0(active0, 0x200000000L);
      case 116:
         return jjMoveStringLiteralDfa13_0(active0, 0x80000000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0);
}
static private int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0);
      return 13;
   }
   switch(curChar)
   {
      case 40:
         return jjMoveStringLiteralDfa14_0(active0, 0x280000000L);
      case 111:
         return jjMoveStringLiteralDfa14_0(active0, 0x400000000L);
      case 114:
         return jjMoveStringLiteralDfa14_0(active0, 0x100000000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0);
}
static private int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0);
      return 14;
   }
   switch(curChar)
   {
      case 39:
         return jjMoveStringLiteralDfa15_0(active0, 0x280000000L);
      case 97:
         return jjMoveStringLiteralDfa15_0(active0, 0x100000000L);
      case 110:
         return jjMoveStringLiteralDfa15_0(active0, 0x400000000L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0);
}
static private int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0);
      return 15;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa16_0(active0, 0x400000000L);
      case 72:
         return jjMoveStringLiteralDfa16_0(active0, 0x80000000L);
      case 109:
         return jjMoveStringLiteralDfa16_0(active0, 0x100000000L);
      case 110:
         return jjMoveStringLiteralDfa16_0(active0, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0);
}
static private int jjMoveStringLiteralDfa16_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0);
      return 16;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa17_0(active0, 0x200000000L);
      case 101:
         return jjMoveStringLiteralDfa17_0(active0, 0x80000000L);
      case 109:
         return jjMoveStringLiteralDfa17_0(active0, 0x400000000L);
      case 115:
         return jjMoveStringLiteralDfa17_0(active0, 0x100000000L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0);
}
static private int jjMoveStringLiteralDfa17_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(15, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0);
      return 17;
   }
   switch(curChar)
   {
      case 40:
         return jjMoveStringLiteralDfa18_0(active0, 0x100000000L);
      case 97:
         return jjMoveStringLiteralDfa18_0(active0, 0x400000000L);
      case 108:
         return jjMoveStringLiteralDfa18_0(active0, 0x80000000L);
      case 109:
         return jjMoveStringLiteralDfa18_0(active0, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0);
}
static private int jjMoveStringLiteralDfa18_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(16, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0);
      return 18;
   }
   switch(curChar)
   {
      case 41:
         if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(18, 32);
         break;
      case 101:
         return jjMoveStringLiteralDfa19_0(active0, 0x200000000L);
      case 105:
         return jjMoveStringLiteralDfa19_0(active0, 0x400000000L);
      case 108:
         return jjMoveStringLiteralDfa19_0(active0, 0x80000000L);
      default :
         break;
   }
   return jjStartNfa_0(17, active0);
}
static private int jjMoveStringLiteralDfa19_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(17, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0);
      return 19;
   }
   switch(curChar)
   {
      case 39:
         return jjMoveStringLiteralDfa20_0(active0, 0x200000000L);
      case 110:
         return jjMoveStringLiteralDfa20_0(active0, 0x400000000L);
      case 111:
         return jjMoveStringLiteralDfa20_0(active0, 0x80000000L);
      default :
         break;
   }
   return jjStartNfa_0(18, active0);
}
static private int jjMoveStringLiteralDfa20_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(18, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, active0);
      return 20;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa21_0(active0, 0x80000000L);
      case 40:
         return jjMoveStringLiteralDfa21_0(active0, 0x400000000L);
      case 41:
         return jjMoveStringLiteralDfa21_0(active0, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_0(19, active0);
}
static private int jjMoveStringLiteralDfa21_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(19, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, active0);
      return 21;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa22_0(active0, 0x200000000L);
      case 39:
         return jjMoveStringLiteralDfa22_0(active0, 0x80000000L);
      case 41:
         return jjMoveStringLiteralDfa22_0(active0, 0x400000000L);
      default :
         break;
   }
   return jjStartNfa_0(20, active0);
}
static private int jjMoveStringLiteralDfa22_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(20, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, active0);
      return 22;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa23_0(active0, 0x480000000L);
      case 63:
         return jjMoveStringLiteralDfa23_0(active0, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_0(21, active0);
}
static private int jjMoveStringLiteralDfa23_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(21, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(22, active0);
      return 23;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa24_0(active0, 0x200000000L);
      case 43:
         return jjMoveStringLiteralDfa24_0(active0, 0x80000000L);
      case 123:
         if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(23, 34);
         break;
      default :
         break;
   }
   return jjStartNfa_0(22, active0);
}
static private int jjMoveStringLiteralDfa24_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(22, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(23, active0);
      return 24;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa25_0(active0, 0x80000000L);
      case 112:
         return jjMoveStringLiteralDfa25_0(active0, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_0(23, active0);
}
static private int jjMoveStringLiteralDfa25_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(23, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(24, active0);
      return 25;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa26_0(active0, 0x200000000L);
      case 110:
         return jjMoveStringLiteralDfa26_0(active0, 0x80000000L);
      default :
         break;
   }
   return jjStartNfa_0(24, active0);
}
static private int jjMoveStringLiteralDfa26_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(24, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(25, active0);
      return 26;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa27_0(active0, 0x80000000L);
      case 114:
         return jjMoveStringLiteralDfa27_0(active0, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_0(25, active0);
}
static private int jjMoveStringLiteralDfa27_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(25, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(26, active0);
      return 27;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa28_0(active0, 0x200000000L);
      case 109:
         return jjMoveStringLiteralDfa28_0(active0, 0x80000000L);
      default :
         break;
   }
   return jjStartNfa_0(26, active0);
}
static private int jjMoveStringLiteralDfa28_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(26, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(27, active0);
      return 28;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa29_0(active0, 0x80000000L);
      case 109:
         return jjMoveStringLiteralDfa29_0(active0, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_0(27, active0);
}
static private int jjMoveStringLiteralDfa29_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(27, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(28, active0);
      return 29;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa30_0(active0, 0x80000000L);
      case 115:
         return jjMoveStringLiteralDfa30_0(active0, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_0(28, active0);
}
static private int jjMoveStringLiteralDfa30_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(28, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(29, active0);
      return 30;
   }
   switch(curChar)
   {
      case 43:
         return jjMoveStringLiteralDfa31_0(active0, 0x80000000L);
      case 46:
         return jjMoveStringLiteralDfa31_0(active0, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_0(29, active0);
}
static private int jjMoveStringLiteralDfa31_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(29, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(30, active0);
      return 31;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa32_0(active0, 0x80000000L);
      case 103:
         return jjMoveStringLiteralDfa32_0(active0, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_0(30, active0);
}
static private int jjMoveStringLiteralDfa32_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(30, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(31, active0);
      return 32;
   }
   switch(curChar)
   {
      case 39:
         return jjMoveStringLiteralDfa33_0(active0, 0x80000000L);
      case 101:
         return jjMoveStringLiteralDfa33_0(active0, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_0(31, active0);
}
static private int jjMoveStringLiteralDfa33_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(31, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(32, active0);
      return 33;
   }
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa34_0(active0, 0x80000000L);
      case 116:
         return jjMoveStringLiteralDfa34_0(active0, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_0(32, active0);
}
static private int jjMoveStringLiteralDfa34_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(32, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(33, active0);
      return 34;
   }
   switch(curChar)
   {
      case 39:
         return jjMoveStringLiteralDfa35_0(active0, 0x80000000L);
      case 40:
         return jjMoveStringLiteralDfa35_0(active0, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_0(33, active0);
}
static private int jjMoveStringLiteralDfa35_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(33, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(34, active0);
      return 35;
   }
   switch(curChar)
   {
      case 39:
         return jjMoveStringLiteralDfa36_0(active0, 0x200000000L);
      case 41:
         return jjMoveStringLiteralDfa36_0(active0, 0x80000000L);
      default :
         break;
   }
   return jjStartNfa_0(34, active0);
}
static private int jjMoveStringLiteralDfa36_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(34, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(35, active0);
      return 36;
   }
   switch(curChar)
   {
      case 59:
         if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(36, 31);
         break;
      case 110:
         return jjMoveStringLiteralDfa37_0(active0, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_0(35, active0);
}
static private int jjMoveStringLiteralDfa37_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(35, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(36, active0);
      return 37;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa38_0(active0, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_0(36, active0);
}
static private int jjMoveStringLiteralDfa38_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(36, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(37, active0);
      return 38;
   }
   switch(curChar)
   {
      case 109:
         return jjMoveStringLiteralDfa39_0(active0, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_0(37, active0);
}
static private int jjMoveStringLiteralDfa39_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(37, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(38, active0);
      return 39;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa40_0(active0, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_0(38, active0);
}
static private int jjMoveStringLiteralDfa40_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(38, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(39, active0);
      return 40;
   }
   switch(curChar)
   {
      case 39:
         return jjMoveStringLiteralDfa41_0(active0, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_0(39, active0);
}
static private int jjMoveStringLiteralDfa41_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(39, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(40, active0);
      return 41;
   }
   switch(curChar)
   {
      case 41:
         return jjMoveStringLiteralDfa42_0(active0, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_0(40, active0);
}
static private int jjMoveStringLiteralDfa42_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(40, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(41, active0);
      return 42;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa43_0(active0, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_0(41, active0);
}
static private int jjMoveStringLiteralDfa43_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(41, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(42, active0);
      return 43;
   }
   switch(curChar)
   {
      case 58:
         return jjMoveStringLiteralDfa44_0(active0, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_0(42, active0);
}
static private int jjMoveStringLiteralDfa44_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(42, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(43, active0);
      return 44;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa45_0(active0, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_0(43, active0);
}
static private int jjMoveStringLiteralDfa45_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(43, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(44, active0);
      return 45;
   }
   switch(curChar)
   {
      case 39:
         return jjMoveStringLiteralDfa46_0(active0, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_0(44, active0);
}
static private int jjMoveStringLiteralDfa46_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(44, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(45, active0);
      return 46;
   }
   switch(curChar)
   {
      case 119:
         return jjMoveStringLiteralDfa47_0(active0, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_0(45, active0);
}
static private int jjMoveStringLiteralDfa47_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(45, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(46, active0);
      return 47;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa48_0(active0, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_0(46, active0);
}
static private int jjMoveStringLiteralDfa48_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(46, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(47, active0);
      return 48;
   }
   switch(curChar)
   {
      case 114:
         return jjMoveStringLiteralDfa49_0(active0, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_0(47, active0);
}
static private int jjMoveStringLiteralDfa49_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(47, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(48, active0);
      return 49;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa50_0(active0, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_0(48, active0);
}
static private int jjMoveStringLiteralDfa50_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(48, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(49, active0);
      return 50;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa51_0(active0, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_0(49, active0);
}
static private int jjMoveStringLiteralDfa51_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(49, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(50, active0);
      return 51;
   }
   switch(curChar)
   {
      case 39:
         if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(51, 33);
         break;
      default :
         break;
   }
   return jjStartNfa_0(50, active0);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 35;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 35:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 22)
                        kind = 22;
                     jjCheckNAdd(34);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 12)
                        kind = 12;
                     jjCheckNAdd(33);
                  }
                  break;
               case 0:
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAddTwoStates(1, 2);
                  }
                  else if (curChar == 47)
                     jjAddStates(0, 1);
                  else if (curChar == 48)
                  {
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAddStates(2, 4);
                  }
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 21:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(27, 28);
                  else if (curChar == 47)
                     jjCheckNAddStates(5, 7);
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 7:
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 16:
                  if (curChar != 48)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAddStates(2, 4);
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAddTwoStates(18, 2);
                  break;
               case 19:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAddTwoStates(19, 2);
                  break;
               case 20:
                  if (curChar == 47)
                     jjAddStates(0, 1);
                  break;
               case 22:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(5, 7);
                  break;
               case 23:
                  if ((0x2400L & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 24:
                  if (curChar == 10 && kind > 5)
                     kind = 5;
                  break;
               case 25:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(27, 28);
                  break;
               case 27:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(27, 28);
                  break;
               case 28:
                  if (curChar == 42)
                     jjAddStates(8, 9);
                  break;
               case 29:
                  if ((0xffff7fffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(30, 28);
                  break;
               case 30:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(30, 28);
                  break;
               case 31:
                  if (curChar == 47 && kind > 6)
                     kind = 6;
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAdd(33);
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 22)
                     kind = 22;
                  jjCheckNAdd(34);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 35:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 22)
                        kind = 22;
                     jjCheckNAdd(34);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 12)
                        kind = 12;
                     jjCheckNAdd(33);
                  }
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 12)
                        kind = 12;
                     jjCheckNAddTwoStates(33, 34);
                  }
                  if ((0x7fffffeL & l) != 0L)
                  {
                     if (kind > 11)
                        kind = 11;
                     jjCheckNAdd(4);
                  }
                  else if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 14;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 2:
                  if ((0x100000001000L & l) != 0L && kind > 7)
                     kind = 7;
                  break;
               case 3:
                  if ((0x7fffffeL & l) == 0L)
                     break;
                  if (kind > 11)
                     kind = 11;
                  jjCheckNAdd(4);
                  break;
               case 4:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 11)
                     kind = 11;
                  jjCheckNAdd(4);
                  break;
               case 5:
                  if (curChar == 120)
                     jjCheckNAdd(6);
                  break;
               case 6:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAdd(6);
                  break;
               case 8:
                  if (curChar == 101 && kind > 27)
                     kind = 27;
                  break;
               case 9:
                  if (curChar == 117)
                     jjCheckNAdd(8);
                  break;
               case 10:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  if (curChar == 115)
                     jjCheckNAdd(8);
                  break;
               case 13:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 17:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(18);
                  break;
               case 18:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAddTwoStates(18, 2);
                  break;
               case 22:
                  jjAddStates(5, 7);
                  break;
               case 27:
                  jjCheckNAddTwoStates(27, 28);
                  break;
               case 29:
               case 30:
                  jjCheckNAddTwoStates(30, 28);
                  break;
               case 32:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddTwoStates(33, 34);
                  break;
               case 33:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAdd(33);
                  break;
               case 34:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 22)
                     kind = 22;
                  jjCheckNAdd(34);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 22:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(5, 7);
                  break;
               case 27:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(27, 28);
                  break;
               case 29:
               case 30:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(30, 28);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 35 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   21, 26, 17, 19, 2, 22, 23, 25, 29, 31, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, "\166\141\162\40", "\75", "\73", 
"\160\150\160\56\114\151\142\56\160\162\151\156\164\50\47\110\145\154\154\157\40\47\40\53\40\156\141\155\145\40\53\40\47\41\47\51\73", "\160\150\160\56\127\145\142\56\147\145\164\120\141\162\141\155\163\50\51", 
"\160\141\162\141\155\163\56\145\170\151\163\164\163\50\47\156\141\155\145\47\51\40\77\40\160\141\162\141\155\163\56\147\145\164\50\47\156\141\155\145\47\51\40\72\40\47\167\157\162\154\144\47", 
"\163\164\141\164\151\143\40\146\165\156\143\164\151\157\156\40\155\141\151\156\50\51\40\173", "\160\141\143\153\141\147\145\40", "\143\154\141\163\163\40", "\173", "\175", 
"\53", "\55", "\52", "\57", "\45", "\50", "\51", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0x3fffffc01881L, 
};
static final long[] jjtoSkip = {
   0x7eL, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[35];
static private final int[] jjstateSet = new int[70];
static protected char curChar;
/** Constructor. */
public eg2TokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public eg2TokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 35; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
